#!/usr/bin/env bash

set -eo pipefail

unity_version="$UNITY_BUILDER_EDITOR_VERSION"

echo "--- image build $unity_version $PLATFORM"

PLUGIN_DIR="$UNITY_BUILDER_DIR"
PROJECT_DIR="$UNITY_BUILDER_PROJECT_DIR"

if [ ! -d "$PROJECT_DIR" ]
then
    echo "not exist project directory"
    exit 1
fi

if [ -z "$unity_version" ]
then
    echo "empty unity version"
    exit 1;
fi

if [ -z "$UNITY_LICENSE" ] 
then
    echo "empty license"
    exit 1
fi

if [ -z "$PLATFORM" ]
then
    echo "empty platform"
    exit 1
fi


# UNITY_VERSION=2021.3.3f1
GAME_CI_VERSION=1.0.1 # https://github.com/game-ci/docker/releases
MY_USERNAME=qkrsogusl3
COMPOSE_FILE="$PLUGIN_DIR/src/docker-compose.yml"
COMPOSE_ENV_FILE="$PLUGIN_DIR/src/.env"
COMPOSE_ENV_FILE_SAMPLE="$PLUGIN_DIR/src/.env.sample"
SYNC_FILE_TEMPLATE="$PLUGIN_DIR/src/docker-sync.yaml.template"
SYNC_FILE="$PLUGIN_DIR/src/docker-sync-${DOCKER_SYNC_NAME}.yaml"

if [ ! -f $COMPOSE_ENV_FILE ]; then
    cp $COMPOSE_ENV_FILE_SAMPLE $COMPOSE_ENV_FILE
fi

# don't hesitate to remove unused components from this list
declare -a components=("$PLATFORM")

for component in "${components[@]}"
do
    export GAME_CI_UNITY_EDITOR_IMAGE=unityci/editor:ubuntu-${unity_version}-${component}-${GAME_CI_VERSION}
    export IMAGE_TO_PUBLISH=${MY_USERNAME}/editor:ubuntu-${unity_version}-${component}-${GAME_CI_VERSION}
    export PLATFORM=${component}

    args=("$@")

    if [[ " ${args[*]} " =~ "-rmi" ]]; then
        args="${args[@]/-rmi}";
        docker rmi $(docker images -q $IMAGE_TO_PUBLISH) || true;
    fi
  
    if [ -z $(docker images -q $IMAGE_TO_PUBLISH) ]; then
        docker-compose -f ${COMPOSE_FILE} build;
    fi

    if [ -n "$DOCKER_SYNC_NAME" ]
    then
        echo "--- docker-sync: $DOCKER_SYNC_NAME"
        cp "$SYNC_FILE_TEMPLATE" "$SYNC_FILE"
        perl -pi -e "s/VOLUME_NAME/${DOCKER_SYNC_NAME}/g" "$SYNC_FILE"
        perl -pi -e "s/SRC/$(echo $PROJECT_DIR | perl -pe 's/\//\\\//g')/g" "$SYNC_FILE"

        docker-sync clean -c "$SYNC_FILE"
        docker-sync start -c "$SYNC_FILE"
        
        echo "--- docker-compose: run with sync"
        docker-compose -f ${COMPOSE_FILE} run \
            --rm \
            -v $(echo "$DOCKER_SYNC_NAME"):/app \
            -v $(echo $PROJECT_DIR/Build):/app/Build \
            unity $(echo ${args})
    else
        echo "--- docker-compose: run"
        docker-compose -f ${COMPOSE_FILE} run \
            --rm \
            -v $(echo $PROJECT_DIR:/app) \
            unity $(echo ${args})
    fi

    : '
    if [ "$DEBUG" = true ]; then
        docker-compose -f ${COMPOSE_FILE} run \
            -itd --entrypoint /bin/bash \
            -v $(echo $PROJECT_DIR:/app) \
            unity
    elif [ -n "$SYNC" ]; then
        echo "compose run sync $args"
        fi
    '
    if [ -f "$SYNC_FILE" ]
    then
        docker-sync clean -c "$SYNC_FILE"
        rm "$SYNC_FILE"
    fi

# uncomment the following to publish the built images to docker hub
#  docker push ${IMAGE_TO_PUBLISH}
done
